name: Create Release on Tag
on:
  workflow_dispatch:
  push:
    tags:
      - "v*.*.*"

jobs:
  job_build:
    name: "v${{ matrix.build_env.tag }} - ${{ matrix.build_env.pkgarch}} :: ${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}} build"
    runs-on: [self-hosted, ubuntu]
    # runs-on: ubuntu-latest
    strategy:
      matrix:
        build_env:
          - tag: "23.05.0"
            pkgarch: mipsel_24kc
            target: ramips
            subtarget: mt7621
            vermagic: "9c242f353867f49a96054ff8c9f2c460"
        include:
          - sdk_ver: 23.05
            luci_ver: 23.05
            sdk_url: https://downloads.openwrt.org/releases/23.05.0/targets/x86/64/openwrt-sdk-23.05.0-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 0
      
      - name: install necessary tools
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install mc nmon htop nano net-tools ncdu tar
          # sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig libtinfo5
          sudo -E apt-get -qq install build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget pip swig
          pip3 install --upgrade pip
          pip3 install setuptools
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
      
      # - name: Cache openwrt SDK
      #   id: cache-sdk
      #   uses: actions/cache@v4
      #   with:
      #     path: sdk
      #     key: openwrt-luci-${{ matrix.luci_ver }}-x86_64

      - name: Tree form gits and configs
        # if: steps.cache-sdk.outputs.cache-hit != 'true'
        run: |
          wget ${{ matrix.sdk_url }}
          file_name=$(echo ${{ matrix.sdk_url }} | awk -F/ '{print $NF}')
          mkdir sdk && tar -xJf $file_name -C ./sdk --strip-components=1
          cd sdk

          # Setup & install feeds
          wget https://downloads.openwrt.org/releases/${{ matrix.build_env.tag }}/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/feeds.buildinfo -O feeds.conf
          # wget https://downloads.openwrt.org/releases/23.05.0/targets/ramips/mt7621/feeds.buildinfo -O feeds.conf
          
          # echo "src-git luci https://github.com/openwrt/luci.git;openwrt-23.05" >> feeds.conf
          # echo "src-git packages https://git.openwrt.org/feed/packages.git;openwrt-23.05" >> feeds.conf
          # echo "src-git base https://github.com/openwrt/openwrt.git;openwrt-23.05" >> feeds.conf
          # echo "src-git telephony https://git.openwrt.org/feed/telephony.git;openwrt-23.05"  >> feeds.conf
          # echo "src-git routing https://git.openwrt.org/feed/routing.git;openwrt-23.05"  >> feeds.conf

          # echo "src-git awgopenwrt https://github.com/yury-sannikov/awg-openwrt.git" >> ./feeds.conf

          # echo "src-git awgopenwrt https://github.com/runalsh/openwrt-action-mipsel_24kc.git;sdk" >> ./feeds.conf

          echo "src-git passwall https://github.com/xiaorouji/openwrt-passwall" >> ./feeds.conf
          echo "src-git passwall_packages https://github.com/xiaorouji/openwrt-passwall-packages" >> ./feeds.conf

          # echo "src-git 3proxy https://github.com/osnosn/3proxy-openwrt" >> ./feeds.conf

          # echo "src-git helloworld https://github.com/fw876/helloworld" >> ./feeds.conf

          # echo "src-git telegram_openwrt https://github.com/alexwbaule/telegramopenwrt^1.1.1" >> ./feeds.conf

          wget https://downloads.openwrt.org/releases/${{ matrix.build_env.tag }}/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/config.buildinfo -O .config
          # wget https://downloads.openwrt.org/releases/23.05.0/targets/ramips/mt7621/config.buildinfo -O .config

          ./scripts/feeds update -a

          echo "CONFIG_PACKAGE_kmod-amneziawg=m" >> .config
          echo "CONFIG_PACKAGE_amneziawg-tools=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-amneziawg=y" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20=m" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20poly1305=m" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-chacha20poly1305=m" >> .config

          ./scripts/feeds update awgopenwrt
          ./scripts/feeds install -d n kmod-amneziawg
          ./scripts/feeds install -d n luci-app-amneziawg
          ./scripts/feeds install -d n amneziawg-tools
         
          # ./scripts/feeds install -a -f -p kmod-amneziawg
          # ./scripts/feeds install -a -f -p luci-app-amneziawg
          # ./scripts/feeds install -a -f -p amneziawg-tools

          echo "CONFIG_PACKAGE_luci-app-passwall=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_Iptables_Transparent_Proxy=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_Nftables_Transparent_Proxy=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ChinaDNS_NG=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Haproxy=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Hysteria=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_NaiveProxy=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Libev_Client=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Libev_Server=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Rust_Client=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Rust_Server=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ShadowsocksR_Libev_Client=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ShadowsocksR_Libev_Server=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Simple_Obfs=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_SingBox=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Trojan_Plus=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_tuic_client=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_V2ray_Geodata=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_V2ray_Plugin=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Xray=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Xray_Plugin=y" >> .config

          ./scripts/feeds update passwall_packages
          ./scripts/feeds update passwall
          ./scripts/feeds install -d n luci-app-passwall

          # echo "CONFIG_PACKAGE_luci-app-passwall2=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall2_Iptables_Transparent_Proxy=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall2_Nftables_Transparent_Proxy=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Brook=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Haproxy=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Hysteria=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_NaiveProxy=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Shadowsocks_Libev_Client=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Shadowsocks_Libev_Server=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Shadowsocks_Rust_Client=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Shadowsocks_Rust_Server=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_ShadowsocksR_Libev_Client=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_ShadowsocksR_Libev_Server=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Simple_Obfs=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_SingBox=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_tuic_client=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_V2ray_Plugin=y" >> .config

          # echo "CONFIG_PACKAGE_luci-app-openclash=y" >> .config

          # echo "CONFIG_PACKAGE_3proxy=y" >> .config

          # echo "CONFIG_PACKAGE_telegram_openwrt=y" >> .config

          make defconfig

      - name: Build AmneziaWG
        continue-on-error: true
        run: |
          cd sdk
          make package/kmod-amneziawg/{clean,download,prepare} V=s -j `nproc`
          make package/luci-app-amneziawg/{clean,download,prepare} V=s -j `nproc`
          make package/amneziawg-tools/{clean,download,prepare} V=s  -j `nproc`
          
          make package/kmod-amneziawg/compile V=s -j `nproc`
          make package/luci-app-amneziawg/compile V=s -j `nproc`
          make package/amneziawg-tools/compile V=s -j `nproc`
          
      - name: Build PassWall
        continue-on-error: true
        run: |
          cd sdk
          make package/luci-app-passwall/{clean,download,prepare} V=s -j `nproc` || true
          make package/luci-app-passwall/compile V=s -j `nproc` || true

      # - name: Build 3proxy
      #   run: |
      #     cd sdk
      #     make package/3proxy/{clean,download,prepare} V=s -j `nproc` || true
      #     make package/3proxy/compile V=s -j `nproc` || true        
          
      # - name: Build helloworld
      #   run: |
      #     cd sdk
      #     make package/helloworld/{clean,download,prepare} V=s -j `nproc` || true
      #     make package/helloworld/compile V=s -j `nproc` || true         
            
      - name: Prepare artifacts
        continue-on-error: true
        run: |
          cd sdk

          tag_name=${{  github.ref_name }}
          mkdir -p release
          postfix="${tag_name}_v${{ matrix.build_env.tag }}_${{ matrix.build_env.pkgarch}}_${{ matrix.build_env.target}}_${{ matrix.build_env.subtarget}}"
          
          cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/amneziawg-tools_*.ipk release/amneziawg-tools_${postfix}.ipk
          cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/luci-app-amneziawg_*.ipk release/luci-app-amneziawg_${postfix}.ipk
          cp bin/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/packages/kmod-amneziawg_*.ipk release/kmod-amneziawg_${postfix}.ipk

          cp bin/packages/${{ matrix.build_env.pkgarch }}/passwall/*.ipk release/
          cp bin/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/packages/luci-app-passwall*.ipk release/luci-app-passwall_${postfix}.ipk
          cp bin/packages/${{ matrix.build_env.pkgarch }}/passwall_packages/*.ipk release/
          cp bin/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/packages/passwall_packages*.ipk release/

          # cp bin/packages/${{ matrix.build_env.pkgarch }}/3proxy/*.ipk release/
          # cp bin/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/packages/*.ipk release/
            
          # cp bin/packages/${{ matrix.build_env.pkgarch }}/helloworld/*.ipk release/
          # cp bin/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/helloworld/*.ipk release/

          # cp bin/packages/${{ matrix.build_env.pkgarch }}/telegram_openwrt/*.ipk release/
          # cp bin/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/telegram_openwrt/*.ipk release/

      - name: Release
        uses: softprops/action-gh-release@master
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: release/*.ipk
          tag_name: ${{  github.ref_name }}
