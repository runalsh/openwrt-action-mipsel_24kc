name: Create Release on Tag
on:
  workflow_dispatch:
  push:
    tags:
      - "v*.*.*"

# orig https://github.com/yury-sannikov/awg-openwrt/blob/master/.github/workflows/build-module.yml
# passwall from https://github.com/xiaorouji/openwrt-passwall/blob/main/.github/workflows/Auto%20compile%20with%20openwrt%20sdk.yml
# 3proxy https://github.com/osnosn/3proxy-openwrt
# helloworld https://github.com/fw876/helloworld

jobs:
  build:
    name: "v${{ matrix.build_env.tag }} - ${{ matrix.build_env.pkgarch}} :: ${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}} build"
    runs-on: [self-hosted, ubuntu]
    # runs-on: ubuntu-latest
    strategy:
      matrix:
        build_env:
          - tag: "23.05.0"
            pkgarch: mipsel_24kc
            target: ramips
            subtarget: mt7621
            vermagic: "9c242f353867f49a96054ff8c9f2c460"
          # - tag: "23.05.2"
          #   pkgarch: mipsel_24kc
          #   target: ramips
          #   subtarget: mt7621
          #   vermagic: "9c242f353867f49a96054ff8c9f2c460"  

    steps:
      - name: Clean runner workspace directory
        uses: bhargavms/action-clean-runner-workspace@1.0

      - name: Restore cache openwrt-cache-${{ matrix.build_env.tag }}-${{ matrix.build_env.target}}-${{ matrix.build_env.subtarget}}
        id: openwrt-cache
        uses: khj809/github-action-cache-local-fs@v1
        with:
          path: ./
          key: openwrt-cache-${{ matrix.build_env.tag }}-${{ matrix.build_env.target}}-${{ matrix.build_env.subtarget}}
          cache-base-path: /root/action-cache
      
      # - name: install necessary tools
      #   env:
      #     DEBIAN_FRONTEND: noninteractive
      #   run: 
      #     sudo -E apt-get -qq update
      #     sudo -E apt-get -qq install mc nmon htop nano net-tools ncdu tar jq
      #     sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig libtinfo5
      #     sudo -E apt-get -qq install build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget pip swig
      #     pip3 install --upgrade pip
      #     pip3 install setuptools
      #     sudo -E apt-get -qq autoremove --purge
      #     sudo -E apt-get -qq clean

      - name: Checkout openwrt
        continue-on-error: true
        run: |    
          git clone --depth 1 --branch v${{ matrix.build_env.tag }} https://github.com/openwrt/openwrt.git .

      - name: Update openwrt
        run: |    
          git pull --depth 1

      - name: Tree form gits and configs
        run: |
          echo "pkgarch: ${{ matrix.build_env.pkgarch}}, target:${{ matrix.build_env.target}}, subtarget: ${{ matrix.build_env.subtarget}}"

          # Setup & install feeds
          wget https://downloads.openwrt.org/releases/${{ matrix.build_env.tag }}/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/feeds.buildinfo -O feeds.conf
          # wget https://downloads.openwrt.org/releases/23.05.0/targets/ramips/mt7621/feeds.buildinfo -O feeds.conf
          
          # echo "src-git luci https://github.com/openwrt/luci.git;openwrt-23.05" >> feeds.conf
          # echo "src-git packages https://git.openwrt.org/feed/packages.git;openwrt-23.05" >> feeds.conf
          # echo "src-git base https://github.com/openwrt/openwrt.git;openwrt-23.05" >> feeds.conf
          # echo "src-git telephony https://git.openwrt.org/feed/telephony.git;openwrt-23.05"  >> feeds.conf
          # echo "src-git routing https://git.openwrt.org/feed/routing.git;openwrt-23.05"  >> feeds.conf

          echo "src-git runalsh https://github.com/runalsh/openwrt-action-mipsel_24kc.git" >> ./feeds.conf

          # echo "src-git passwall https://github.com/xiaorouji/openwrt-passwall" >> ./feeds.conf
          # echo "src-git passwall_packages https://github.com/xiaorouji/openwrt-passwall-packages" >> ./feeds.conf

          # echo "src-git 3proxy https://github.com/osnosn/3proxy-openwrt" >> ./feeds.conf

          # echo "src-git helloworld https://github.com/fw876/helloworld" >> ./feeds.conf

          # echo "src-git telegram_openwrt https://github.com/alexwbaule/telegramopenwrt^1.1.1" >> ./feeds.conf


          ####### https://github.com/sbwml/openwrt-curl-prebuilt/blob/main/.github/workflows/build-packages.yml
          # mv packages/net/curl curl
          # rm -rf packages
          # # enable openssl & nghttp3 & ngtcp2
          # sed -i 's/default LIBCURL_MBEDTLS/default LIBCURL_OPENSSL/g' curl/Config.in
          # sed -i -E '/LIBCURL_NG(HTTP3|TCP2)/,/default n/s/default n/default y/' curl/Config.in
          # # version
          # curl_version=$(grep -Po '(?<=PKG_VERSION:=).*' curl/Makefile)
          # echo "curl_version=$curl_version" >> "$GITHUB_ENV"
          # # depends
          # git clone https://github.com/sbwml/package_libs_ngtcp2 ngtcp2
          # git clone https://github.com/sbwml/package_libs_nghttp3 nghttp3
          # # openssl quic
          # git clone https://github.com/openwrt/openwrt -b openwrt-23.05 --depth=1
          # cp -a openwrt/package/libs/openssl openssl
          # rm -rf openwrt
          # mirror="raw.githubusercontent.com/sbwml/r4s_build_script/master"
          # pushd openssl/patches
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0001-QUIC-Add-support-for-BoringSSL-QUIC-APIs.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0002-QUIC-New-method-to-get-QUIC-secret-length.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0003-QUIC-Make-temp-secret-names-less-confusing.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0004-QUIC-Move-QUIC-transport-params-to-encrypted-extensi.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0005-QUIC-Use-proper-secrets-for-handshake.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0006-QUIC-Handle-partial-handshake-messages.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0007-QUIC-Fix-quic_transport-constructors-parsers.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0008-QUIC-Reset-init-state-in-SSL_process_quic_post_hands.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0009-QUIC-Don-t-process-an-incomplete-message.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0010-QUIC-Quick-fix-s2c-to-c2s-for-early-secret.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0011-QUIC-Add-client-early-traffic-secret-storage.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0012-QUIC-Add-OPENSSL_NO_QUIC-wrapper.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0013-QUIC-Correctly-disable-middlebox-compat.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0014-QUIC-Move-QUIC-code-out-of-tls13_change_cipher_state.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0015-QUIC-Tweeks-to-quic_change_cipher_state.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0016-QUIC-Add-support-for-more-secrets.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0017-QUIC-Fix-resumption-secret.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0018-QUIC-Handle-EndOfEarlyData-and-MaxEarlyData.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0019-QUIC-Fall-through-for-0RTT.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0020-QUIC-Some-cleanup-for-the-main-QUIC-changes.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0021-QUIC-Prevent-KeyUpdate-for-QUIC.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0022-QUIC-Test-KeyUpdate-rejection.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0023-QUIC-Buffer-all-provided-quic-data.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0024-QUIC-Enforce-consistent-encryption-level-for-handsha.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0025-QUIC-add-v1-quic_transport_parameters.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0026-QUIC-return-success-when-no-post-handshake-data.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0027-QUIC-__owur-makes-no-sense-for-void-return-values.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0028-QUIC-remove-SSL_R_BAD_DATA_LENGTH-unused.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0029-QUIC-SSLerr-ERR_raise-ERR_LIB_SSL.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0030-QUIC-Add-compile-run-time-checking-for-QUIC.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0031-QUIC-Add-early-data-support.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0032-QUIC-Make-SSL_provide_quic_data-accept-0-length-data.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0033-QUIC-Process-multiple-post-handshake-messages-in-a-s.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0034-QUIC-Fix-CI.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0035-QUIC-Break-up-header-body-processing.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0036-QUIC-Don-t-muck-with-FIPS-checksums.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0037-QUIC-Update-RFC-references.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0038-QUIC-revert-white-space-change.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0039-QUIC-use-SSL_IS_QUIC-in-more-places.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0040-QUIC-Error-when-non-empty-session_id-in-CH.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0041-QUIC-Update-SSL_clear-to-clear-quic-data.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0042-QUIC-Better-SSL_clear.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0043-QUIC-Fix-extension-test.patch
          #     curl -sO https://$mirror/openwrt/patch/openssl/quic/0044-QUIC-Update-metadata-version.patch
          # popd

          # ./scripts/feeds clean
          ./scripts/feeds update -a && ./scripts/feeds install -a

          wget https://downloads.openwrt.org/releases/${{ matrix.build_env.tag }}/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/config.buildinfo -O .config
          # wget https://downloads.openwrt.org/releases/23.05.0/targets/ramips/mt7621/config.buildinfo -O .config
          
          echo "CONFIG_PACKAGE_kmod-amneziawg=m" >> .config
          echo "CONFIG_PACKAGE_amneziawg-tools=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-amneziawg=y" >> .config
          echo "CONFIG_PACKAGE_luci-proto-amneziawg=y" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20=m" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20poly1305=m" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-chacha20poly1305=m" >> .config

          # echo "CONFIG_PACKAGE_luci-app-passwall=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_Iptables_Transparent_Proxy=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_Nftables_Transparent_Proxy=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ChinaDNS_NG=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Haproxy=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Hysteria=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_NaiveProxy=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Libev_Client=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Libev_Server=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Rust_Client=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Rust_Server=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ShadowsocksR_Libev_Client=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ShadowsocksR_Libev_Server=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Simple_Obfs=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_SingBox=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Trojan_Plus=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_tuic_client=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_V2ray_Geodata=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_V2ray_Plugin=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Xray=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Xray_Plugin=y" >> .config

          # echo "CONFIG_PACKAGE_luci-app-passwall2=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall2_Iptables_Transparent_Proxy=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall2_Nftables_Transparent_Proxy=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Brook=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Haproxy=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Hysteria=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_NaiveProxy=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Shadowsocks_Libev_Client=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Shadowsocks_Libev_Server=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Shadowsocks_Rust_Client=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Shadowsocks_Rust_Server=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_ShadowsocksR_Libev_Client=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_ShadowsocksR_Libev_Server=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Simple_Obfs=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_SingBox=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_tuic_client=y" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_V2ray_Plugin=y" >> .config

          # echo "CONFIG_PACKAGE_luci-app-openclash=y" >> .config

          # echo "CONFIG_PACKAGE_3proxy=y" >> .config

          # echo "CONFIG_PACKAGE_telegram_openwrt=y" >> .config

          # echo "CONFIG_PACKAGE_sslh2=y" >> .config

          # echo "CONFIG_PACKAGE_stunnel=y" >> .config

          # echo "CONFIG_PACKAGE_nmon=y" >> .config

          # CONFIG_LIBCURL_COOKIES=y
          # CONFIG_LIBCURL_FILE=y
          # CONFIG_LIBCURL_FTP=y
          # CONFIG_LIBCURL_HTTP=y
          # CONFIG_LIBCURL_NGHTTP2=y
          # CONFIG_LIBCURL_NGHTTP3=y
          # CONFIG_LIBCURL_NGTCP2=y
          # CONFIG_LIBCURL_NO_SMB="!"
          # CONFIG_LIBCURL_OPENSSL=y
          # CONFIG_LIBCURL_PROXY=y
          # CONFIG_LIBCURL_UNIX_SOCKETS=y

          make defconfig

          # VERMAGIC=`cat ./build_dir/target-*/linux-*/linux-*/.vermagic`
          # VERMAGIC_EXPECTED=${{ matrix.build_env.vermagic }}

          # if [ "$VERMAGIC" != "$VERMAGIC_EXPECTED" ]; then
          #   echo Vermagic mismatch: $VERMAGIC, expected $VERMAGIC_EXPECTED
          #   exit 1
          # fi

      # - name: Building tools
      #   run: |
      #     echo "pkgarch: ${{ matrix.build_env.pkgarch}}, target:${{ matrix.build_env.target}}, subtarget: ${{ matrix.build_env.subtarget}}"    
      #     echo "current $(date)"
      #     echo "    > make tools/install"
      #     make tools/install -i -j `nproc`  V=s

      # - name: Building toolchain
      #   run: |
      #     echo "pkgarch: ${{ matrix.build_env.pkgarch}}, target:${{ matrix.build_env.target}}, subtarget: ${{ matrix.build_env.subtarget}}"   
      #     echo "current $(date)"
      #     echo "    > make toolchain/install"
      #     make toolchain/install  -i -j `nproc`  V=s

      # - name: Building linux
      #   run: |
      #     echo "pkgarch: ${{ matrix.build_env.pkgarch}}, target:${{ matrix.build_env.target}}, subtarget: ${{ matrix.build_env.subtarget}}"      
      #     echo "current $(date)"
      #     # compile kernel module
      #     echo "    > make target/linux/compile"
      #     make target/linux/compile  -i -j `nproc` V=s

      - name: Build AmneziaWG
        run: |
          # VERMAGIC=`cat ./build_dir/target-*/linux-*/linux-*/.vermagic`
          # echo "Vermagic: $VERMAGIC"

          # VERMAGIC_EXPECTED=${{ matrix.build_env.vermagic }}

          # if [ "$VERMAGIC" != "$VERMAGIC_EXPECTED" ]; then
          #   echo Vermagic mismatch: $VERMAGIC, expected $VERMAGIC_EXPECTED
          #   exit 1
          # fi

          echo "current $(date)"

          make package/kmod-amneziawg/{clean,download,prepare} V=s -j `nproc`
          make package/kmod-amneziawg/compile V=s -j `nproc`

          # make package/luci-app-amneziawg/{clean,download,prepare} V=s -j `nproc`
          # make package/luci-app-amneziawg/compile V=s -j `nproc`

          make package/luci-proto-amneziawg/{clean,download,prepare} V=s -j `nproc`
          make package/luci-proto-amneziawg/compile V=s -j `nproc`

          make package/amneziawg-tools/{clean,download,prepare} V=s  -j `nproc`
          make package/amneziawg-tools/compile V=s -j `nproc`

      # - name: Build PassWall
      #   run: |
      #       echo "current $(date)"
      #       make package/luci-app-passwall/{clean,download,prepare} V=s -j `nproc` || true
      #       make package/luci-app-passwall/compile V=s -j `nproc` || true

      # - name: Build 3proxy
      #   run: |
      #       echo "current $(date)"
      #       make package/3proxy/{clean,download,prepare} V=s -j `nproc` || true
      #       make package/3proxy/compile V=s -j `nproc` || true        
          
      # - name: Build helloworld
      #   run: |
      #       echo "current $(date)"
      #       make package/helloworld/{clean,download,prepare} V=s -j `nproc` || true
      #       make package/helloworld/compile V=s -j `nproc` || true         
            
      - name: Prepare artifacts
        continue-on-error: true
        run: |
          tag_name=${{  github.ref_name }}
          mkdir -p release
          postfix="${tag_name}_v${{ matrix.build_env.tag }}_${{ matrix.build_env.pkgarch}}_${{ matrix.build_env.target}}_${{ matrix.build_env.subtarget}}"
          cp bin/packages/${{ matrix.build_env.pkgarch }}/runalsh/amneziawg-tools_*.ipk release/amneziawg-tools_${postfix}.ipk
          cp bin/packages/${{ matrix.build_env.pkgarch }}/runalsh/luci-app-amneziawg_*.ipk release/luci-app-amneziawg_${postfix}.ipk
          cp bin/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/packages/kmod-amneziawg_*.ipk release/kmod-amneziawg_${postfix}.ipk

          # cp bin/packages/${{ matrix.build_env.pkgarch }}/passwall/*.ipk release/
          # cp bin/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/packages/luci-app-passwall*.ipk release/luci-app-passwall_${postfix}.ipk
          # cp bin/packages/${{ matrix.build_env.pkgarch }}/passwall_packages/*.ipk release/
          # cp bin/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/packages/passwall_packages*.ipk release/

          # cp bin/packages/${{ matrix.build_env.pkgarch }}/3proxy/*.ipk release/
          # cp bin/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/packages/*.ipk release/
            
          # cp bin/packages/${{ matrix.build_env.pkgarch }}/helloworld/*.ipk release/
          # cp bin/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/helloworld/*.ipk release/

          # cp bin/packages/${{ matrix.build_env.pkgarch }}/telegram_openwrt/*.ipk release/
          # cp bin/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/telegram_openwrt/*.ipk release/

      - name: Release
        uses: softprops/action-gh-release@v1
        continue-on-error: true
        with:
          files: release/*.ipk