name: Create Release on Tag
on: [workflow_dispatch]
# on:
#   push:
#     tags:
#       - "v*.*.*"

# passwall from https://github.com/xiaorouji/openwrt-passwall/blob/main/.github/workflows/Auto%20compile%20with%20openwrt%20sdk.yml
# 3proxy https://github.com/osnosn/3proxy-openwrt
# helloworld https://github.com/fw876/helloworld

jobs:
  build:
    name: "v${{ matrix.build_env.tag }} - ${{ matrix.build_env.pkgarch}} :: ${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}} build"
    runs-on: self-hosted
    strategy:
      matrix:
        build_env:
          - tag: "23.05.0"
            pkgarch: mipsel_24kc
            target: ramips
            subtarget: mt7621
            vermagic: "9c242f353867f49a96054ff8c9f2c460"
          # - tag: "23.05.2"
          #   pkgarch: mipsel_24kc
          #   target: ramips
          #   subtarget: mt7621
          #   vermagic: "9c242f353867f49a96054ff8c9f2c460"  

    steps:
      - name: install necessary tools
        env:
          DEBIAN_FRONTEND: noninteractive
        run: 
          docker rmi `docker images -q`
          sudo -E apt-get update
          sudo -E apt-get -y upgrade
          sudo -E apt-get -y dist-upgrade
          sudo -E apt-get -y install mc nmon htop nano net-tools 
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig libtinfo5
          sudo -E apt-get -y install build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget pip swig
          sudo -E pip3 install --upgrade pip
          sudo -E pip3 install setuptools
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
      - uses: actions/checkout@v4
        with:
          repository: openwrt/openwrt
          ref: v${{ matrix.build_env.tag }}
          fetch-depth: 0

      - name: Cache Tools and Kernel
        id: cache-tools-kernel
        uses: actions/cache@v4
        env:
          cache-name: "cache-tools-kernel-${{ matrix.build_env.tag }}-${{ matrix.build_env.pkgarch}}-${{ matrix.build_env.target}}-${{ matrix.build_env.subtarget}}"
        with:
          path: "**"
          key: ${{ runner.os }}-build-vm4-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-build-vm4-cache-tools-kernel-${{ matrix.build_env.tag }}-${{ matrix.build_env.pkgarch}}-

      - name: Building kernel and tools
        if: ${{ steps.cache-tools-kernel.outputs.cache-hit != 'true' }}
        run: |
          echo "pkgarch: ${{ matrix.build_env.pkgarch}}, target:${{ matrix.build_env.target}}, subtarget: ${{ matrix.build_env.subtarget}}"

          # Setup & install feeds
          wget https://downloads.openwrt.org/releases/${{ matrix.build_env.tag }}/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/feeds.buildinfo -O feeds.conf
          
          echo "src-git awgopenwrt https://github.com/yury-sannikov/awg-openwrt.git" >> ./feeds.conf
          
          # echo "src-git passwall https://github.com/xiaorouji/openwrt-passwall" >> ./feeds.conf
          # echo "src-git passwall_packages https://github.com/xiaorouji/openwrt-passwall-packages" >> ./feeds.conf

          # echo "src-git 3proxy https://github.com/osnosn/3proxy-openwrt" >> ./feeds.conf

          # echo "src-git helloworld https://github.com/fw876/helloworld.git" >> ./feeds.conf

          ./scripts/feeds update -a && ./scripts/feeds install -a

          # Setup config with AWG and dependencies
          wget https://downloads.openwrt.org/releases/${{ matrix.build_env.tag }}/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/config.buildinfo -O .config
          echo "CONFIG_PACKAGE_kmod-amneziawg=m" >> .config
          echo "CONFIG_PACKAGE_amneziawg-tools=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-amneziawg=y" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20=m" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20poly1305=m" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-chacha20poly1305=m" >> .config

          # echo "CONFIG_PACKAGE_luci-app-passwall=m" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_Iptables_Transparent_Proxy=n" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_Nftables_Transparent_Proxy=n" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ChinaDNS_NG=n" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Haproxy=n" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Hysteria=n" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_NaiveProxy=n" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Libev_Client=n" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Libev_Server=n" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Rust_Client=n" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Rust_Server=n" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ShadowsocksR_Libev_Client=n" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ShadowsocksR_Libev_Server=n" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Simple_Obfs=n" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_SingBox=n" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Trojan_Plus=n" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_tuic_client=n" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_V2ray_Geodata=n" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_V2ray_Plugin=n" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Xray=n" >> .config
          # echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Xray_Plugin=n" >> .config

          # echo "CONFIG_PACKAGE_3proxy=y" >> .config

          make defconfig

          echo "    > make tools/install"
          make tools/install -i -j `nproc`

          cat ./build_dir/target-*/linux-*/linux-*/.vermagic || true

          echo "    > make toolchain/install"
          make toolchain/install  -i -j `nproc`

          cat ./build_dir/target-*/linux-*/linux-*/.vermagic || true

          # compile kernel module
          echo "    > make target/linux/compile"
          make target/linux/compile  -i -j `nproc` V=s

          VERMAGIC=`cat ./build_dir/target-*/linux-*/linux-*/.vermagic`
          VERMAGIC_EXPECTED=${{ matrix.build_env.vermagic }}

          if [ "$VERMAGIC" != "$VERMAGIC_EXPECTED" ]; then
            echo Vermagic mismatch: $VERMAGIC, expected $VERMAGIC_EXPECTED
            exit 1
          fi

      - name: Build AmneziaWG
        run: |
          VERMAGIC=`cat ./build_dir/target-*/linux-*/linux-*/.vermagic`
          echo "Vermagic: $VERMAGIC"

          VERMAGIC_EXPECTED=${{ matrix.build_env.vermagic }}

          if [ "$VERMAGIC" != "$VERMAGIC_EXPECTED" ]; then
            echo Vermagic mismatch: $VERMAGIC, expected $VERMAGIC_EXPECTED
            exit 1
          fi

          # Ignore kmod build for some targets, replace with the awg-go
          make package/kmod-amneziawg/{clean,download,prepare} V=s -j `nproc` || true
          make package/kmod-amneziawg/compile V=s -j `nproc` || true

          make package/luci-app-amneziawg/{clean,download,prepare} -j `nproc`
          make package/luci-app-amneziawg/compile V=s -j `nproc`

          make V=s package/amneziawg-tools/{clean,download,prepare} -j `nproc`
          make V=s package/amneziawg-tools/compile -j `nproc`

      - name: Build PassWall
        run: |
            VERMAGIC=`cat ./build_dir/target-*/linux-*/linux-*/.vermagic`
            echo "Vermagic: $VERMAGIC"
  
            VERMAGIC_EXPECTED=${{ matrix.build_env.vermagic }}
  
            if [ "$VERMAGIC" != "$VERMAGIC_EXPECTED" ]; then
              echo Vermagic mismatch: $VERMAGIC, expected $VERMAGIC_EXPECTED
              exit 1
            fi
  
            make package/luci-app-passwall/{clean,download,prepare} V=s -j `nproc` || true
            make package/luci-app-passwall/compile V=s -j `nproc` || true

      - name: Build 3proxy
        run: |
            VERMAGIC=`cat ./build_dir/target-*/linux-*/linux-*/.vermagic`
            echo "Vermagic: $VERMAGIC"
  
            VERMAGIC_EXPECTED=${{ matrix.build_env.vermagic }}
  
            if [ "$VERMAGIC" != "$VERMAGIC_EXPECTED" ]; then
              echo Vermagic mismatch: $VERMAGIC, expected $VERMAGIC_EXPECTED
              exit 1
            fi
  
            make package/3proxy/{clean,download,prepare} V=s -j `nproc` || true
            make package/3proxy/compile V=s -j `nproc` || true        
          
      - name: Build helloworld
        run: |
            VERMAGIC=`cat ./build_dir/target-*/linux-*/linux-*/.vermagic`
            echo "Vermagic: $VERMAGIC"
  
            VERMAGIC_EXPECTED=${{ matrix.build_env.vermagic }}
  
            if [ "$VERMAGIC" != "$VERMAGIC_EXPECTED" ]; then
              echo Vermagic mismatch: $VERMAGIC, expected $VERMAGIC_EXPECTED
              exit 1
            fi
  
            make package/helloworld/{clean,download,prepare} V=s -j `nproc` || true
            make package/helloworld/compile V=s -j `nproc` || true         
            
      - name: Prepare artifacts
        run: |
          tag_name=${{  github.ref_name }}
          mkdir -p release
          postfix="${tag_name}_v${{ matrix.build_env.tag }}_${{ matrix.build_env.pkgarch}}_${{ matrix.build_env.target}}_${{ matrix.build_env.subtarget}}"
          cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/amneziawg-tools_*.ipk release/amneziawg-tools_${postfix}.ipk
          cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/luci-app-amneziawg_*.ipk release/luci-app-amneziawg_${postfix}.ipk
          cp bin/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/packages/kmod-amneziawg_*.ipk release/kmod-amneziawg_${postfix}.ipk

          # cp bin/packages/${{ matrix.build_env.pkgarch }}/passwall/*.ipk release/
          # cp bin/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/packages/luci-app-passwall*.ipk release/luci-app-passwall_${postfix}.ipk

          # cp bin/packages/${{ matrix.build_env.pkgarch }}/3proxy/*.ipk release/
          # cp bin/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/packages/*.ipk release/
            
          # cp bin/packages/${{ matrix.build_env.pkgarch }}/helloworld/*.ipk release/
          # cp bin/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/helloworld/*.ipk release/

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*.ipk

